---
- name: Enforce CIS 3.4.2.2 - Loopback Firewall Rules (Using Core Ansible Modules)
  hosts: all
  become: true
  gather_facts: true

  vars:
    ts: "{{ lookup('pipe', 'date +%Y%m%d-%H%M%S') }}"
    restore_from_latest_backup: false

  pre_tasks:
    - name: Gather systemd service facts
      ansible.builtin.service_facts:

    - name: Check if IPv6 is disabled
      ansible.builtin.command: sysctl -n net.ipv6.conf.all.disable_ipv6
      register: ipv6_flag
      changed_when: false
      failed_when: false

    - name: Set fact if IPv6 is disabled
      ansible.builtin.set_fact:
        ipv6_disabled: "{{ (ipv6_flag.stdout | default('1')).strip() }}"

    - name: Detect active firewall type
      ansible.builtin.set_fact:
        fw_type: >-
          {{ 'firewalld' if ('firewalld.service' in ansible_facts.services and
                              ansible_facts.services['firewalld.service'].status == 'enabled')
             else 'nftables' if ('nftables.service' in ansible_facts.services and
                                 ansible_facts.services['nftables.service'].status == 'enabled')
             else 'none' }}

    - name: Fail if neither or both firewalls are enabled
      ansible.builtin.fail:
        msg: >-
          Exactly one of firewalld or nftables must be enabled.
      when: fw_type == 'none' or
            ( 'firewalld.service' in ansible_facts.services and
              'nftables.service' in ansible_facts.services and
              ansible_facts.services['firewalld.service'].status == 'enabled' and
              ansible_facts.services['nftables.service'].status == 'enabled')

  tasks:

    - name: Backup existing firewall configuration
      block:
        - name: Backup firewalld permanent configuration
          ansible.builtin.command: firewall-cmd --runtime-to-permanent
          when: fw_type == 'firewalld'

        - name: Archive /etc/firewalld
          ansible.builtin.archive:
            path: /etc/firewalld
            dest: "/root/fw-backup-{{ ts }}.tar.gz"
            format: gz
          when: fw_type == 'firewalld'

        - name: Backup nftables ruleset
          ansible.builtin.shell: "nft list ruleset > /root/fw-backup-{{ ts }}.nft"
          when: fw_type == 'nftables'
      when: not restore_from_latest_backup

    - name: Restore from latest backup if needed
      block:
        - name: Find latest backup
          ansible.builtin.find:
            paths: /root
            patterns: "fw-backup-*.tar.gz,fw-backup-*.nft"
            recurse: no
            age_stamp: mtime
          register: backup_files

        - name: Fail if no backup found
          ansible.builtin.fail:
            msg: "No firewall backup found."
          when: backup_files.matched == 0

        - name: Restore firewalld backup
          ansible.builtin.unarchive:
            src: "{{ backup_files.files | sort(attribute='mtime') | last.path }}"
            dest: /
            extra_opts: [--strip-components=3]
          when: fw_type == 'firewalld'

        - name: Restore nftables backup
          ansible.builtin.copy:
            src: "{{ backup_files.files | sort(attribute='mtime') | last.path }}"
            dest: /root/restore.nft
          when: fw_type == 'nftables'

        - name: Load restored nftables ruleset
          ansible.builtin.command: "nft -f /root/restore.nft"
          when: fw_type == 'nftables'

      when: restore_from_latest_backup

    - name: Apply loopback rules if using firewalld
      block:
        - name: Add loopback interface to trusted zone if not already added
          ansible.builtin.command: firewall-cmd --permanent --zone=trusted --add-interface=lo
          when: fw_type == 'firewalld' and "'lo' not in (lookup('pipe', 'firewall-cmd --list-all-zones --permanent'))"

        - name: Ensure IPv4 spoofing is dropped (if not already done)
          ansible.builtin.command: >
            firewall-cmd --permanent --add-rich-rule='rule family=ipv4
            source address="127.0.0.1" destination not address="127.0.0.1" drop'
          when: fw_type == 'firewalld' and "'127.0.0.1' not in (lookup('pipe', 'firewall-cmd --list-all --permanent'))"

        - name: Ensure IPv6 spoofing is dropped (if IPv6 enabled and not already done)
          ansible.builtin.command: >
            firewall-cmd --permanent --add-rich-rule='rule family=ipv6
            source address="::1" destination not address="::1" drop'
          when:
            - fw_type == 'firewalld'
            - ipv6_disabled == '0'
            - "'::1' not in (lookup('pipe', 'firewall-cmd --list-all --permanent'))"

    - name: Reload firewalld to apply all rules
      ansible.builtin.command: firewall-cmd --reload
      when: fw_type == 'firewalld'

    - name: Apply loopback rules if using nftables
      block:
        - name: Ensure nftables accept loopback traffic if not already present
          ansible.builtin.shell: |
            nft list ruleset | grep -q 'iif "lo" accept' || nft add rule inet filter input iif lo accept
          when: fw_type == 'nftables'

        - name: Ensure nftables drop IPv4 loopback spoof if not already present
          ansible.builtin.shell: |
            nft list ruleset | grep -q 'ip saddr 127.0.0.0/8 counter drop' || nft add rule inet filter input ip saddr 127.0.0.0/8 counter drop
          when: fw_type == 'nftables'

        - name: Ensure nftables drop IPv6 loopback spoof if not already present
          ansible.builtin.shell: |
            nft list ruleset | grep -q 'ip6 saddr ::1 counter drop' || nft add rule inet filter input ip6 saddr ::1 counter drop
          when:
            - fw_type == 'nftables'
            - ipv6_disabled == '0'
